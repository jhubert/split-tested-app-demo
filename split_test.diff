diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index e8065d9..f0a2e6d 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -1,3 +1,45 @@
 class ApplicationController < ActionController::Base
   protect_from_forgery
+
+  before_filter :setup_split_testing
+
+  private
+
+  # If a split_test_key other than BASELINE exists, add the proper
+  # view path to the load paths used by ActionView
+  def setup_split_testing
+    @split_test_key = get_split_test_key
+    return if @split_test_key == 'BASELINE' || @split_test_key.nil?
+    split_test_path = preprocessed_pathsets[ApplicationController.custom_view_path(@split_test_key)]
+    prepend_view_path(split_test_path) if split_test_path
+  end
+
+  # Get the existing split_test_key from the session or the cookie.
+  # If there isn't one, or if the one isn't a running test anymore
+  # assign the user a new key and store it. 
+  # Don't assign a key if it is a crawler. (This doesn't feel right)
+  def get_split_test_key
+    return params[:force_test_key] if params[:force_test_key] # just for testing
+    return session[:split_test_key] if session[:split_test_key] && SPLIT_TESTS.has_key?(session[:split_test_key])
+    return session[:split_test_key] = cookies[:split_test_key] if cookies[:split_test_key] && SPLIT_TESTS.has_key?(cookies[:split_test_key])
+    if (request.user_agent =~ /\b(Baidu|Gigabot|Googlebot|libwww-perl|lwp-trivial|msnbot|SiteUptime|Slurp|WordPress|ZIBB|ZyBorg)\b/i)
+      session[:split_test_key] = nil
+    else
+      session[:split_test_key] = ApplicationController.random_test_key
+      cookies[:split_test_key] = session[:split_test_key]
+    end
+    return session[:split_test_key]
+  end
+
+  # For caching, we need to add something to the cache_path
+  # so that it caches each version of the page seperately.
+  # Ideally, this would be added into the ActionCaching 
+  # module directly so that you don't need to specify anything
+  # in the caches_action command
+  def custom_cache_path
+    path = ActionCachePath.new(self).path
+    path += ":#{@split_test_key}" if @split_test_key && @split_test_key != 'BASELINE'
+    path
+  end
+
 end
diff --git a/app/controllers/general_controller.rb b/app/controllers/general_controller.rb
new file mode 100644
index 0000000..2a7bb57
--- /dev/null
+++ b/app/controllers/general_controller.rb
@@ -0,0 +1,8 @@
+class GeneralController < ApplicationController
+  # Uses the custom_cache_path from ApplicationController
+  # to make sure the right split test is cached
+  caches_action :index, :cache_path => :custom_cache_path.to_proc
+
+  def index
+  end
+end
diff --git a/app/views/layouts/application.html.erb b/app/views/layouts/application.html.erb
index a0b7129..f423414 100644
--- a/app/views/layouts/application.html.erb
+++ b/app/views/layouts/application.html.erb
@@ -1,14 +1,41 @@
 <!DOCTYPE html>
 <html>
 <head>
-  <title>ABTest2</title>
-  <%= stylesheet_link_tag :all %>
-  <%= javascript_include_tag :defaults %>
+  <title>ABTestedApp</title>
   <%= csrf_meta_tag %>
 </head>
 <body>
 
 <%= yield %>
 
+<p>See the <a href="?force_test_key=BASELINE">BASELINE</a> or the <a href="?force_test_key=test1">Test</a></p>
+
+<p>The magic happens in the Google Analytics tracking code. We use a Custom Variable to track which test is being run and can view the data accordingly.</p>
+
+<pre><code>
+  var _gaq = _gaq || [];
+  _gaq.push(['_setAccount', 'YOUR GOOGLE ANALYTICS KEY']);
+  <span style="color: red;">_gaq.push(['_setCustomVar', 1, 'ABTestKey', '&lt;%= @split_test_key %&gt;', 2]);</span>
+  _gaq.push(['_trackPageview']);
+  (function() {
+    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
+    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
+    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
+  })();
+</code></pre>
+
+<script type="text/javascript">
+
+  var _gaq = _gaq || [];
+  _gaq.push(['_setAccount', 'YOUR GOOGLE ANALYTICS KEY']);
+  _gaq.push(['_setCustomVar', 1, 'ABTestKey', '<%= @split_test_key %>', 2]);
+  _gaq.push(['_trackPageview']);
+  (function() {
+    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
+    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
+    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
+  })();
+
+</script>
 </body>
 </html>
diff --git a/config/initializers/split_testing.rb b/config/initializers/split_testing.rb
new file mode 100644
index 0000000..670e992
--- /dev/null
+++ b/config/initializers/split_testing.rb
@@ -0,0 +1,68 @@
+# Load the additional view folders so that they can be used on the fly
+ActionController::Base.class_eval do
+
+  SPLIT_TESTS = YAML.load_file("#{RAILS_ROOT}/config/split_tests.yml")
+
+  def self.custom_view_path(name)
+    name == "views" ? "app/views" : "test/split/#{name}/views"
+  end
+
+  def self.random_test_key
+    split_test_map.sample
+  end
+
+  # preprocess some pathsets on boot
+  # doing pathset generation during a request is very costly
+  @@preprocessed_pathsets = begin
+    SPLIT_TESTS.keys.reject { |k| k == 'BASELINE' }.inject({}) do |pathsets, slug|
+      path = ActionController::Base.custom_view_path(slug)
+      pathsets[path] = ActionView::Base.process_view_paths(path).first
+      pathsets
+    end
+  end
+
+  @@split_test_map = begin
+    tm = {} # test map
+    SPLIT_TESTS.each { |k, v| tm[k] = v['size'].to_i }
+    tm.keys.zip(tm.values).collect { |v,d| (0...d).collect { v }}.flatten
+  end
+
+  cattr_accessor :preprocessed_pathsets, :split_test_map
+end
+
+# Add the split test language files to the load path
+I18n.load_path += Dir[Rails.root.join('test', 'split', '*', 'locale.{rb,yml}')]
+
+# Overwrite the translate method so that it tries the bucket translation first
+# TODO: There HAS to be a better way to write this
+module ActionView
+  module Helpers
+    module TranslationHelper
+      def fallback_translate(key, options = {})
+        translation = I18n.translate(scope_key_by_partial(key), options.merge!(:raise => true))
+        if html_safe_translation_key?(key) && translation.respond_to?(:html_safe)
+          translation.html_safe
+        else
+          translation
+        end
+      rescue I18n::MissingTranslationData => e
+        keys = I18n.normalize_keys(e.locale, e.key, e.options[:scope])
+        content_tag('span', keys.join(', '), :class => 'translation_missing')
+      end
+
+      def translate(key, options = {})
+        original_options = options.clone
+        options[:scope] = (options[:scope] ? "#{@split_test_key}.#{options[:scope]}" : @split_test_key) if @split_test_key
+        translation = I18n.translate(scope_key_by_partial(key), options.merge!(:raise => true))
+        if html_safe_translation_key?(key) && translation.respond_to?(:html_safe)
+          translation.html_safe
+        else
+          translation
+        end
+      rescue I18n::MissingTranslationData => e
+        fallback_translate(e.key, original_options)
+      end
+      alias t translate
+    end
+  end
+end
\ No newline at end of file
diff --git a/config/locales/en.yml b/config/locales/en.yml
index a747bfa..e32dc54 100644
--- a/config/locales/en.yml
+++ b/config/locales/en.yml
@@ -1,5 +1,4 @@
-# Sample localization file for English. Add more files in this directory for other locales.
-# See http://github.com/svenfuchs/rails-i18n/tree/master/rails%2Flocale for starting points.
-
 en:
-  hello: "Hello world"
+  general:
+    index:
+      headline: "Hello A/B Testing World!"
diff --git a/config/split_tests.yml b/config/split_tests.yml
new file mode 100644
index 0000000..a0b3b8e
--- /dev/null
+++ b/config/split_tests.yml
@@ -0,0 +1,10 @@
+# Size represents the percent of traffic you want for each test
+# The total of all sizes should equal 100% of traffic.
+# It's easiest to think of it as being based out of 10 or 100.
+# Right now, we are running a 50/50 traffic split
+BASELINE:
+  description: The baseline. This is a version running the default code.
+  size: 5
+test1:
+  description: Just a simple change to the intro text on the index page
+  size: 5
diff --git a/test/split/test1/locale.yml b/test/split/test1/locale.yml
new file mode 100644
index 0000000..d70bb90
--- /dev/null
+++ b/test/split/test1/locale.yml
@@ -0,0 +1,8 @@
+# The only difference is the insertion of the test key after the
+# language in the path of the translation. For other languages,
+# just repeate the pattern.
+en:
+  test1:
+    general:
+      index:
+        headline: "Hello A/B Testing World, from Test 1!"
\ No newline at end of file
diff --git a/test/split/test1/views/general/about.html.erb b/test/split/test1/views/general/about.html.erb
new file mode 100644
index 0000000..ebc381a
--- /dev/null
+++ b/test/split/test1/views/general/about.html.erb
@@ -0,0 +1,3 @@
+<h1>This is the tested page</h1>
+
+<p>This page is defined in the test/split/test1/views/general path and is part of your test layout.</p>
\ No newline at end of file